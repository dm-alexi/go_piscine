// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transmitter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EmitterClient is the client API for Emitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmitterClient interface {
	BeginTransmission(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (Emitter_BeginTransmissionClient, error)
}

type emitterClient struct {
	cc grpc.ClientConnInterface
}

func NewEmitterClient(cc grpc.ClientConnInterface) EmitterClient {
	return &emitterClient{cc}
}

func (c *emitterClient) BeginTransmission(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (Emitter_BeginTransmissionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Emitter_serviceDesc.Streams[0], "/Emitter/BeginTransmission", opts...)
	if err != nil {
		return nil, err
	}
	x := &emitterBeginTransmissionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Emitter_BeginTransmissionClient interface {
	Recv() (*Quant, error)
	grpc.ClientStream
}

type emitterBeginTransmissionClient struct {
	grpc.ClientStream
}

func (x *emitterBeginTransmissionClient) Recv() (*Quant, error) {
	m := new(Quant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmitterServer is the server API for Emitter service.
// All implementations must embed UnimplementedEmitterServer
// for forward compatibility
type EmitterServer interface {
	BeginTransmission(*ConnectionRequest, Emitter_BeginTransmissionServer) error
	mustEmbedUnimplementedEmitterServer()
}

// UnimplementedEmitterServer must be embedded to have forward compatible implementations.
type UnimplementedEmitterServer struct {
}

func (UnimplementedEmitterServer) BeginTransmission(*ConnectionRequest, Emitter_BeginTransmissionServer) error {
	return status.Errorf(codes.Unimplemented, "method BeginTransmission not implemented")
}
func (UnimplementedEmitterServer) mustEmbedUnimplementedEmitterServer() {}

// UnsafeEmitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmitterServer will
// result in compilation errors.
type UnsafeEmitterServer interface {
	mustEmbedUnimplementedEmitterServer()
}

func RegisterEmitterServer(s grpc.ServiceRegistrar, srv EmitterServer) {
	s.RegisterService(&_Emitter_serviceDesc, srv)
}

func _Emitter_BeginTransmission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmitterServer).BeginTransmission(m, &emitterBeginTransmissionServer{stream})
}

type Emitter_BeginTransmissionServer interface {
	Send(*Quant) error
	grpc.ServerStream
}

type emitterBeginTransmissionServer struct {
	grpc.ServerStream
}

func (x *emitterBeginTransmissionServer) Send(m *Quant) error {
	return x.ServerStream.SendMsg(m)
}

var _Emitter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Emitter",
	HandlerType: (*EmitterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BeginTransmission",
			Handler:       _Emitter_BeginTransmission_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transmitter.proto",
}
